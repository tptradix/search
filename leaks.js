import axios from 'axios';
import { promises as fs } from 'fs';
import path from 'path';

async function leak(phone) {
    const checkRow = 'vtb_user,';
    let checkRow1 = '';
    let linePhone = '';
    let answer = '';


    const part1 = phone.slice(0, 2);
    const part2 = phone.slice(2, 4);
    const part3 = phone.slice(4, 6);
    const part4 = phone.slice(6, 8);
    const part = `${part1}/${part2}/${part3}/${part4}.csv`;

    const URLavito = `https://data.intelx.io/saverudata/db2/dbpn/${part}`;
    const tempFilePath = path.join('/tmp', 'leak.csv');

    try {
        const response = await axios.get(URLavito);
        const data = response.data;

        await fs.writeFile(tempFilePath, data, 'utf-8');
        const fileContent = await fs.readFile(tempFilePath, 'utf-8');
        const lines = fileContent.split('\n');

        for (let line of lines) {
            if (line.includes(checkRow)) {
                checkRow1 = line;
                break;
            }
        }

        for (let line of lines) {
            if (line.includes(phone)) {
                linePhone = line;
                const checkka = checkRow1.replace(/,/g, '\n');
                const count = (checkka.match(/\n/g) || []).length - 1;

                for (let num = 2; num < count; num++) {
                    linePhone += ',,,,,';
                    const result = linePhone.split(',')[num];
                    const por = checkRow1.split(',')[num];
                    const headr = por
                        .replace('cdek_full_name', 'üë§ <b>–§–ò–û:</b> ')
                        .replace('fb_profile_id', 'üßø <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Facebook:</b> https://facebook.com/profile.php?id=')
                        .replace('fb_full_name', 'üßø <b>–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è Facebook:</b> ')
                        .replace('vk_first_name', 'ü§ñ <b>–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –í–ö:</b> ')
                        .replace('vk_last_name', 'ü§ñ <b>–§–∞–º–∏–ª–∏—è –ø—Ä–æ—Ñ–∏–ª—è –í–ö:</b> ')
                        .replace('vk_email', 'ü§ñ <b>–ü–æ—á—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫ –í–ö:</b> ')
                        .replace('vtb_user', 'üíé <b>–ö–ª–∏–µ–Ω—Ç –í–¢–ë:</b> ')
                        .replace('cdek_email', 'üìß <b>–ü–æ—á—Ç–∞:</b> ')
                        .replace('fb_address1', 'üßø <b>–ê–¥—Ä–µ—Å –ø—Ä–æ—Ñ–∏–ª—è Facebook:</b> ')
                        .replace('fb_address2', 'üßø <b>–ê–¥—Ä–µ—Å –ø—Ä–æ—Ñ–∏–ª—è Facebook:</b> ')
                        .replace('fb_work', 'üßø <b>–†–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ Facebook:</b> ')
                        .replace('yandex_name', 'üíä <b>–ò–º—è –∏–∑ –Ø–Ω–¥–µ–∫—Å:</b> ')
                        .replace('yandex_created_at', 'mt')
                        .replace('yandex_place_id', 'mt')
                        .replace('yandex_place_name', 'mt')
                        .replace('yandex_address_city', 'üè† <b>–í–æ–∑–º–æ–∂–Ω—ã–π –≥–æ—Ä–æ–¥:</b> ')
                        .replace('yandex_address_street', 'üè† <b>–í–æ–∑–º–æ–∂–Ω–∞—è —É–ª–∏—Ü–∞:</b> ')
                        .replace('yandex_address_house', 'üè† <b>–í–æ–∑–º–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–º–∞:</b> ')
                        .replace('yandex_address_comment', 'mt')
                        .replace('yandex_region_id', 'mt')
                        .replace('yandex_latitude', 'mt')
                        .replace('yandex_longitude', 'mt')
                        .replace('yandex_amount_rub', 'mt')
                        .replace('yandex_sum_orders', 'mt')
                        .replace('yandex_user_agent', 'üïπ <b>User-Agent:</b> ')
                        .replace('yandex_address_entrance', 'mt')
                        .replace('yandex_address_floor', 'mt')
                        .replace('yandex_address_office', 'mt')
                        .replace('yandex_address_doorcode', 'üö™ <b>–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:</b> ')
                        .replace('pikabu_username', 'üíø <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Pikabu:</b> ')
                        .replace('pikabu_email', 'üíø <b>–ü–æ—á—Ç–∞ –Ω–∞ Pikabu:</b> ')
                        .replace('rfcont_name', 'üåö <b>–í–æ–∑–º–æ–∂–Ω–æ–µ –∏–º—è:</b> ')
                        .replace('rfcont_email', 'üìß <b>–ü–æ—á—Ç–∞:</b> ')
                        .replace('miltor_name', 'üéæ <b>–ò–º—è –Ω–∞ Miltor:</b> ')
                        .replace('miltor_email', 'üéæ <b>–ü–æ—á—Ç–∞ –Ω–∞ Miltor:</b> ')
                        .replace('miltor_fio', 'üéæ <b>–§–ò–û –Ω–∞ Miltor:</b> ')
                        .replace('mailru_email', 'ü¶ã <b>–ü–æ—á—Ç–∞ –Ω–∞ MailRU:</b> ')
                        .replace('mailru_profile', 'mt')
                        .replace('mailru_full_name', 'ü¶ã <b>–ò–º—è –Ω–∞ MailRU:</b> ')
                        .replace('mailru_avatar', 'mt')
                        .replace('mailru_age', 'mt')
                        .replace('wildberries_name', 'ü¶Ñ <b>–ò–º—è –Ω–∞ WildBerries:</b> ')
                        .replace('wildberries_comment', 'mt')
                        .replace('wildberries_email', 'ü¶Ñ <b>–ü–æ—á—Ç–∞ –Ω–∞ WildBerries:</b> ')
                        .replace('wildberries_address', 'ü¶Ñ <b>–ê–¥—Ä–µ—Å –Ω–∞ WildBerries:</b> ')
                        .replace('wildberries_lat', 'mt')
                        .replace('wildberries_lon', 'mt')
                        .replace('avito_user_name', 'üè™ <b>–ò–º—è –Ω–∞ –ê–≤–∏—Ç–æ:</b> ')
                        .replace('avito_price', 'mt')
                        .replace('avito_ad_pdate', 'mt')
                        .replace('avito_ad_title', 'mt')
                        .replace('avito_city', 'üè™ <b>–ì–æ—Ä–æ–¥ –Ω–∞ –ê–≤–∏—Ç–æ:</b> ')
                        .replace('avito_user_location', 'üè™ <b>–õ–æ–∫–∞—Ü–∏—è –Ω–∞ –ê–≤–∏—Ç–æ:</b> ')
                        .replace('gibdd2_name', 'üöó <b>–ì–ò–ë–î–î –∏–º—è:</b> ')
                        .replace('gibdd2_passport_address', 'üöó <b>–ì–ò–ë–î–î –∞–¥—Ä–µ—Å –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> ')
                        .replace('gibdd2_passport', 'üöó <b>–ì–ò–ë–î–î –ø–∞—Å–ø–æ—Ä—Ç:</b> ')
                        .replace('gibdd2_dateofbirth', 'üöó <b>–ì–ò–ë–î–î –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ')
                        .replace('gibdd2_base_name', 'mt')
                        .replace('gibdd2_car_vin', 'üöó <b>–ì–ò–ë–î–î VIN:</b> ')
                        .replace('gibdd2_car_year', 'mt')
                        .replace('gibdd2_car_model', 'mt')
                        .replace('gibdd2_car_plate_number', 'üöó <b>–ì–ò–ë–î–î –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> ')
                        .replace('sushi_name', '‚õ© <b>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –°—É—à–∏–ú–∞—Å—Ç–µ—Ä:</b> ')
                        .replace('sushi_date', 'mt')
                        .replace('sushi_address_city', '‚õ© <b>–ì–æ—Ä–æ–¥ –∑–∞–∫–∞–∑—á–∏–∫–∞ –°—É—à–∏–ú–∞—Å—Ç–µ—Ä:</b> ')
                        .replace('sushi_address_street', '‚õ© <b>–£–ª–∏—Ü–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –°—É—à–∏–ú–∞—Å—Ç–µ—Ä:</b> ')
                        .replace('sushi_address_home', '‚õ© <b>–î–æ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –°—É—à–∏–ú–∞—Å—Ç–µ—Ä:</b> ')
                        .replace('sushi_address_housing', '‚õ© <b>–ö–≤–∞—Ä—Ç–∏—Ä–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –°—É—à–∏–ú–∞—Å—Ç–µ—Ä:</b> ')
                        .replace('sushi_lat', 'mt')
                        .replace('sushi_long', 'mt')
                        .replace('beeline_full_name', 'üêù <b>–§–ò–û –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_address_city', 'üêù <b>–ì–æ—Ä–æ–¥ –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_address_city', 'üêù <b>–ì–æ—Ä–æ–¥ –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_address_street', 'üêù <b>–£–ª–∏—Ü–∞ –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_address_house', 'üêù <b>–î–æ–º –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_address_appt', 'üêù <b>–ö–≤–∞—Ä—Ç–∏—Ä–∞ –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_address_floors_count', 'mt')
                        .replace('beeline_address_entrance_count', 'mt')
                        .replace('beeline_latitude', 'mt')
                        .replace('beeline_longitude', 'mt')
                        .replace('beeline_inet_info', 'üêù <b>–¢–∞—Ä–∏—Ñ –∞–±–æ–Ω–µ–Ω—Ç–∞ –ë–∏–ª–∞–π–Ω:</b> ')
                        .replace('beeline_inet_mbps', 'mt')
                        .replace('gibdd_name', 'üöó <b>–ì–ò–ë–î–î –∏–º—è:</b> ')
                        .replace('gibdd_passport_address', 'üöó <b>–ì–ò–ë–î–î –∞–¥—Ä–µ—Å –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> ')
                        .replace('gibdd_passport', 'üöó <b>–ì–ò–ë–î–î –ø–∞—Å–ø–æ—Ä—Ç:</b> ')
                        .replace('gibdd_dateofbirth', 'üöó <b>–ì–ò–ë–î–î –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ')
                        .replace('gibdd_base_name', 'mt')
                        .replace('gibdd2_car_vin', 'üöó <b>–ì–ò–ë–î–î VIN:</b> ')
                        .replace('gibdd_car_year', 'mt')
                        .replace('gibdd_car_model', 'mt')
                        .replace('gibdd_car_plate_number', 'üöó <b>–ì–ò–ë–î–î –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> ')
                        .replace('gibdd_old_car_plate_number', 'üöó <b>–ì–ò–ë–î–î —Å—Ç–∞—Ä—ã–π –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> ')
                        .replace('gibdd2_old_car_plate_number', 'üöó <b>–ì–ò–ë–î–î —Å—Ç–∞—Ä—ã–π –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:</b> ')
                        .replace('lnmatch_last_name', 'üõ° <b>–í–æ–∑–º–æ–∂–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è:</b> ')
                        .replace('sushi_amount_rub', 'mt')
                        .replace('sushi_total_rub', '')
                        .replace('vk_password', 'üîë <b>–ü–∞—Ä–æ–ª—å –æ—Ç –í–ö:</b> ')
                        .replace('gibdd2_passport_issue_date', 'üöó <b>–ì–ò–ë–î–î –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> ');

                    let fbex = '';
                    linePhone = linePhone.replace(', Russia', '').replace(/"/g, '');
                    try {
                        fbex = linePhone.split('"')[1];
                    } catch {}
    
                    if (result && headr !== 'mt') {
                        answer += `${headr}<code>${result}</code>\n`;
                    }
                }
            }
        }

    return answer;
}

export default leak;

